// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        versionCode = 1
        versionName = "0.0.1"

        minSdkVersion = 21
        maxSdkVersion = 30
        buildToolsVersion = "30.0.2"

        androidGradleVersion = '4.2.0-alpha16'
        googleServicesVersion = "4.3.3"
        kotlinVersion = '1.4.10'
        appcompatVersion = '1.2.0'
        constraintLayoutVersion = "2.0.3"
        transitionsVersion = "1.3.1"
        lifecycleVersion = "2.3.0-beta01"
        coreKtxVersion = "1.3.2"
        koinVersion = '2.1.6'
        coroutinesVersion = "1.4.0"
        materialVersion = "1.2.1"
        threetenabpVersion = '1.2.4'
        timberVersion = "4.7.1"
        jUnitVersion = "4.13.1"
        testRunnerVersion = "1.2.0"
        espressoCoreVersion = "3.3.0"
        recyclerViewVersion = "1.1.0"
        coreVersion = '1.2.0'
        rulesVersion = '1.3.0'
        jUnitExtVersion = '1.1.2'
        truthExtVersion = '1.3.0'
        truthVersion = '1.0.1'
        guavaVersion = '28.2-jre'
        roomVersion = '2.2.3'
        workVersion = '2.3.0'
        activityVersion = '1.2.0-alpha08'
        fragmentVersion = '1.3.0-alpha08'
        glideVersion = '4.11.0'
        navigationVersion = '2.3.0'
    }

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$androidGradleVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id "com.diffplug.spotless" version "5.7.0"
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

subprojects {
    apply plugin: 'com.diffplug.spotless'
    spotless {
        kotlin {
            target "**/*.kt"
            ktlint()
        }
    }

    // `spotlessCheck` runs when a build includes `check`, notably during pre-submit. In these cases
    // we prefer `spotlessCheck` run as early as possible since it fails in seconds. This prevents a
    // build from running for several minutes doing other intensive tasks (resource processing, code
    // generation, compilation, etc) only to fail on a formatting nit.
    // Using `mustRunAfter` avoids creating a task dependency. The order is enforced only if
    // `spotlessCheck` is already scheduled to run, so we can still build and launch from the IDE
    // while the code is "dirty".
    tasks.whenTaskAdded {
        if (name == 'preBuild') {
            mustRunAfter 'spotlessCheck'
        }
    }
}
